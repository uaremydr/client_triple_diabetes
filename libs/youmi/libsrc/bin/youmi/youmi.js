window.YMSDK = function (e) { var t = {}; function o(n) { if (t[n])
    return t[n].exports; var r = t[n] = { i: n, l: !1, exports: {} }; return e[n].call(r.exports, r, r.exports, o), r.l = !0, r.exports; } return o.m = e, o.c = t, o.d = function (e, t, n) { o.o(e, t) || Object.defineProperty(e, t, { configurable: !1, enumerable: !0, get: n }); }, o.n = function (e) { var t = e && e.__esModule ? function () { return e.default; } : function () { return e; }; return o.d(t, "a", t), t; }, o.o = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t); }, o.p = "./dist", o(o.s = 0); }([function (e, t, o) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }), t.isDebug = !1, t.version = "1.0.0";
        var n = function () { function e() { } return Object.defineProperty(e, "Instance", { get: function () { return this._instance || (this._instance = new this); }, enumerable: !0, configurable: !0 }), e.prototype.init = function (e, t) { WebRTCAPI.init(e, t); }, e.prototype.createRoom = function (e, t) { WebRTCAPI.createRoom(e, t); }, e.prototype.startWebRTC = function (e) { WebRTCAPI.startWebRTC(e); }, e.prototype.quit = function () { WebRTCAPI.quit(); }, e.prototype.openVideo = function () { WebRTCAPI.openVideo(); }, e.prototype.closeVideo = function () { WebRTCAPI.closeVideo(); }, e.prototype.openAudio = function () { WebRTCAPI.openAudio(); }, e.prototype.closeAudio = function () { WebRTCAPI.closeAudio(); }, e.prototype.changeSpearRole = function (e) { WebRTCAPI.changeSpearRole(e); }, e.prototype.getOpenId = function (e) { return WebRTCAPI.getOpenId(e); }, e.prototype.getVideoDevices = function (e) { return WebRTCAPI.getVideoDevices(e); }, e.prototype.chooseVideoDevice = function (e) { WebRTCAPI.chooseVideoDevice(e); }, e; }();
        t.YMWebRTC = n;
    }]);
